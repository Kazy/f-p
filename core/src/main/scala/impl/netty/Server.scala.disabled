package silt
package impl
package netty

import java.util.concurrent.CountDownLatch

import io.netty.bootstrap.ServerBootstrap
import io.netty.channel.{ EventLoopGroup, ChannelFuture, ChannelHandler, ChannelHandlerContext, ChannelInboundHandlerAdapter, ChannelInitializer, ChannelOption }
import io.netty.channel.nio.NioEventLoopGroup
import io.netty.channel.socket.SocketChannel
import io.netty.channel.socket.nio.NioServerSocketChannel

import com.typesafe.scalalogging.{ StrictLogging => Logging }

// XXX Implement pickling with Netty Encoder/Decoder ChannelHandlers 
// XXX Add a LoggingHandler to the pipeline

private[netty] class Server(val at: Host, val handler: ChannelHandler /*, val latch: CountDownLatch*/ ) extends AnyRef with Logging {

  private val b = new ServerBootstrap
  private var f: ChannelFuture = _

  private val boss: EventLoopGroup = new NioEventLoopGroup
  private val wrkr: EventLoopGroup = new NioEventLoopGroup

  /** Initialize and start a Netty-based server as described at
    * [[http://netty.io/wiki/user-guide-for-4.x.html]]
    */
  def init(): Unit = {
    logger.info(s"SERVER: initializing...")

    //try {
    b.group(boss, wrkr)
      .channel(classOf[NioServerSocketChannel])
      .childHandler(new ChannelInitializer[SocketChannel]() {
        override def initChannel(ch: SocketChannel): Unit =
          ch.pipeline().addLast(handler)
      })
    //.option(ChannelOption.SO_BACKLOG.asInstanceOf[ChannelOption[Any]], 128)
    //.childOption(ChannelOption.SO_KEEPALIVE.asInstanceOf[ChannelOption[Any]], true)

    /*} finally {
      wrkr.shutdownGracefully()
      boss.shutdownGracefully()
    }*/
  }

  def start(): ChannelFuture = {
    println("<<<")
    f = b.bind(at.port).sync()
    println(">>>")
    logger.info(s"SERVER: up and running at `$at`.")
    f

    //  //latch.await()

    //  f.channel().closeFuture.sync()
  }

  def stop() = {
    logger.info(s"SERVER: shutting down...")
    f.channel().close()
    wrkr.shutdownGracefully()
    boss.shutdownGracefully()
    logger.info(s"SERVER: shutdown done.")
  }
}

// vim: set tw=80 ft=scala:
